name: SBOM-to-DependencyTrack
description: This action builds a CycloneDX Format Software Bill of Materials (SBOM) for a repository and sends it to a OWASP DT server
inputs:
  dt-url:
    description: 'The URL of the Dependency-Track API server to send the SBOM to OWASP Dependency Track Server'
    required: true
  project-name:
    description: 'Project name.'
    required: false
  project-version:
    description: 'Project version.'
    required: false
  project-uuid:
    description: 'Project UUID can be provided instead of project name and version.'
    required: false
  path-to-sbom:
    description: 'path to the sbom to upload.'
    required: true
runs:
  using: "composite"
  steps:
    - run: |
            API_ENDPOINT="${{ inputs.dt-url }}"
            PROJECT_NAME="${{ inputs.project-name }}"
            PROJECT_VERSION="${{ inputs.project-version }}"
            NEW_SBOM="${{ inputs.path-to-sbom }}"
            UUID="${{ inputs.project-uuid }}"
            echo "$API_KEY"
            if [ -z "$UUID" ]; then
                if [ -z "$PROJECT_NAME" ] || [ -z "$PROJECT_VERSION" ]; then
                    echo "Error: Either UUID or both project name and version must be provided."
                    exit 1
                fi
                echo "Curl command to retrieve project UUID:"
                echo "curl -k -X GET -H \"X-Api-Key: $API_KEY\" \"$API_ENDPOINT/api/v1/project/lookup?name=$PROJECT_NAME&version=$PROJECT_VERSION\""

                echo "GET project UUID"
                response=$(curl -k -X GET  -H "X-Api-Key: $API_KEY" "$API_ENDPOINT/api/v1/project/lookup?name=$PROJECT_NAME&version=$PROJECT_VERSION")

                if echo "$response" | jq -e '.uuid' > /dev/null; then
                    UUID=$(echo "$response" | jq -r '.uuid')
                    echo "UUID: $UUID"
                else
                    echo "Couldn't retrieve project UUID, an error occured: $response"
                    exit 1
                fi
            else
                echo "UUID provided: $UUID. Skipping project lookup."
            fi
            #echo "Curl command to retrieve existing SBOM from Dependency Track:"
            #echo "curl -k -X GET -H \"X-Api-Key: $API_KEY\" \"$API_ENDPOINT/api/v1/bom/cyclonedx/project/${uuid}?format=json&variant=withVulnerabilities&download=true\""
            #echo "GET existing SBOM from Dependency Track"
            #response=$(curl -k -X GET -H "X-Api-Key: $API_KEY" "$API_ENDPOINT/api/v1/bom/cyclonedx/project/${UUID}?format=json&variant=withVulnerabilities&download=true")
            #
            #if echo "$response" | jq -e '.errors' > /dev/null; then
            #    echo "Error: Couldn't retrieve existing SBOM. Error message: $response"
            #    exit 1
            #else
            #    echo "Existing SBOM retrieved from Dependency Track"
            #    echo "$response" > existing_sbom.json
            #fi
            #jq -C . existing_sbom.json
            #if [ -f existing_sbom.json ]; then
            #    echo "Merging the existing and new SBOMs"
            jq '.metadata.tools = .metadata.tools.components | del(.metadata.tools[0].components) | .'  "$NEW_SBOM" > temp_new_sbom.json
            #     echo "temp"
            #     echo "################"
            #     echo "################"
            #     echo "################"
            #     echo "################"
            #     echo "################"
            #     jq -C . temp_new_sbom.json
            #     jq -s 'def deepmerge(a;b):
            #              reduce b[] as $item (a;
            #                 reduce ($item | keys_unsorted[]) as $key (.;
            #                   $item[$key] as $val | ($val | type) as $type | .[$key] = if ($type == "object") then
            #                     deepmerge({}; [if .[$key] == null then {} else .[$key] end, $val])
            #                   elif ($type == "array") then
            #                    (.[$key] + $val | unique)
            #                   else
            #                     $val
            #                   end)
            #                 );
            #             deepmerge({}; .)' temp_new_sbom.json existing_sbom.json > aggregated_sbom.json
            #     rm temp_new_sbom.json
            #else
            #    echo "No existing SBOM found. Skipping merge operation."
            #    cp "$NEW_SBOM" aggregated_sbom.json
            #fi
            echo "encode the combined SBOM JSON and build payload"
            encoded_sbom=$(jq -c . temp_new_sbom.json | base64 | tr -d '\n')
            payloadfile=$(mktemp)

              if [[ -z "$uuid" ]]; then
                cat << EOF > "$payloadfile"
            {
              "projectName": "${{ inputs.project-name }}",
              "projectVersion": "${{ inputs.project-version }}",
              "autoCreate":true,
              "bom": "$encoded_sbom"
            }
            EOF
              else
                cat << EOF > "$payloadfile"
            {
              "project": "${uuid}",
              "autoCreate":true,
              "bom": "$encoded_sbom"
            }
            EOF
              fi
            echo "$payloadfile"
            echo "PUT aggregated SBOM to Dependency Track"
            put_response=$(curl -k -X PUT "${{ inputs.dt-url }}/api/v1/bom" \
              -H "Content-Type: application/json" \
              -H "X-Api-Key: ${{ inputs.api-key }}" \
              -d @"$payloadfile" 2>&1)
            echo "$put_response"

            #rm "existing_sbom.json" "aggregated_sbom.json"
      shell: bash
